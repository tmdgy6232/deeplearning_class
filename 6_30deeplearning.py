# -*- coding: utf-8 -*-
"""6/30딥러닝.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ecniAMAUcCwUUXUnKo4lYjVSP8kteULh
"""

kor_y, kor_yh = 21, 15
usa_y, usa_yh = 10, 12
chn_y, chn_yh = 14, 18

kor = [kor_y, kor_yh]
usa = [usa_y, usa_yh]
chn = [chn_y, chn_yh]

dataList = [kor, usa, chn]

n = len(dataList)

bunja = 0
for i in dataList:
  bunja += (i[0]-i[1])**2

result = bunja / len(dataList)
print(result)

import numpy as np
y_1 = 21
y_2 = 10
y_3 = 14
y_hat_1 = 15
y_hat_2 = 12
y_hat_3 = 18

a = (y_1 - y_hat_1)**2
b = (y_2 - y_hat_2)**2
c = (y_3 - y_hat_3)**2

n=3

mse = (a+b+c) / n
print('MSE : {}'.format(np.round(mse,4)))

result_row = []

row = ['M', 0.455, 0.365, 0.095]
np_zeros_data = np.zeros(3)
if 'M' in row:
  np_zeros_data[0] = 1
elif 'F' in row:
  np_zeros_data[1] = 1
else: 
  np_zeros_data[2] = 1
np_list = list(np_zeros_data)
result = np_list + row[1:]
print(result)

#강사님
result_row = []

row = ['M', 0.455, 0.365, 0.095]
np_zeros_data = np.zeros(6)
if 'M' in row:
  np_zeros_data[0] = 1
elif 'F' in row:
  np_zeros_data[1] = 1
else: 
  np_zeros_data[2] = 1
np_zeros_data[3:] = row[1:]
print(np_zeros_data)

import csv

with open('/content/abalone_mini.csv') as csvfile:
  csvreader = csv.reader(csvfile)
  
  rows = []
  for row in csvreader:
    np_zeros_data = np.zeros((len(row)+2))
    if row[0] == 'M':
      np_zeros_data[0] = 1
    elif row[0] == 'F':
      np_zeros_data[1] = 1
    else:
      np_zeros_data[2] = 1
    
    np_zeros_data[3:] = row[1:]
    rows.append(np_zeros_data)
  
  print(rows)

#강사님
with open('/content/abalone_mini.csv') as csvfile:
  csvreader = csv.reader(csvfile)
  rows = []
  for i in csvreader:
    rows.append(i)
  data = np.zeros([5,11])

  for i, v in enumerate(rows):
    #print(i, v)
    if v[0] == 'M': data[i,0] = 1
    if v[0] == 'F': data[i,1] = 1
    if v[0] == 'I': data[i,2] = 1
    data[i,3:] = v[1:]
  
  print(data)

def model_exec():
  model_init()

RND_MEAN = 0
RND_STD = 1

def model_init():
  global weight, bias
  weight = np.random.normal(RND_MEAN, RND_STD, size = 1)
  bias = np.random.normal(RND_MEAN, RND_STD, 1)

model_exec()
print('weight : {}'.format(weight))
print('bias : {}'.format(bias))

class Art():

  def __init__(self):
    pass
Art.C_model_init = model_init

a = Art()
a.func = model_init
a.func()
print(bias, weight)